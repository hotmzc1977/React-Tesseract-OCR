{"version":3,"sources":["OCR.tsx","App.tsx","index.tsx"],"names":["OCR","props","useState","size","width","window","screen","height","OCRSize","setOCRSize","language","upperPanelPosAndSize","setUpperPanelPosAndSize","lowerPanelPosAndSize","setLowerPanelPosAndSize","videcropHeightRatio","videoOffsetPosAndSize","setVideoOffsetPosAndSize","videoSize","setVideoSize","videoZoom","setVideoZoom","cropArea","setCropArea","inputRef","useRef","imageSrc","setImageSrc","cropData","setCropData","cropDataPreview","setCropDataPreview","cropper","setCropper","setText","result","setResult","zoomCropData","setZoomCropData","zoomImageSrc","setZoomImageSrc","scenario","setScenario","resultMode","progress","setProgress","selectedBox","setSelectedBox","confidence","previewCanvasRef","autoMode","setAutoMode","processingRef","intervalRef","videoRef","streamRef","workerRef","imageRef","useEffect","panelHeight","left","top","fileToBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","onerror","error","cropImageInSelectedAreaFromVideo","current","ctx","getContext","drawImage","newimgUri","toDataURL","toString","updateImageSrc","image","copyToCropDate","getImageSize","imgSize","zoom","calculateZoom","processImage","updateCropData","imageUrl","updateOnly","imgBase64","img","Image","src","decode","naturalWidth","naturalHeight","imageSize","canvasSize","xScale","yScale","onInputChange","files","length","imageBase64","undefined","onOCRClicked","fullImage","cropImage","getCroppedCanvas","toBlob","blob","recognize","then","console","log","success","catch","err","setInterval","onExamineResult","setTimeout","clearInterval","playVideo","navigator","mediaDevices","getUserMedia","audio","video","facingMode","stream","srcObject","play","videoWidth","videoHeight","offsetTop","offsetLeft","offsetWidth","offsetHeight","Math","min","stopVideo","getTracks","forEach","track","stop","offsetParent","blocks","initialize","Tesseract","createWorker","logger","m","status","load","loadLanguage","terminate","Box","style","position","border","backgroundColor","opacity","margin","right","bottom","overflow","ref","autoPlay","muted","playsInline","maxWidth","background","maxHeight","zoomTo","viewMode","minCropBoxHeight","minCropBoxWidth","responsive","checkOrientation","onInitialized","instance","guides","alt","hidden","data","paragraphs","words","lines","map","item","index","key","id","onClick","onSelect","text","bbox","x0","y0","x1","y1","color","fontSize","display","whiteSpace","sx","alignItems","justifyContent","CircularProgress","variant","value","Typography","component","round","Fab","click","IconButton","Switch","borderRadius","checked","onChange","_","accept","type","event","target","App","React","l","find","line","startsWith","textAlign","ReactDOM","render","document","querySelector"],"mappings":"gZAgDe,SAASA,EAAIC,GAAe,IAAD,cACtC,EAA8BC,mBAAyB,QAAjB,EAAOD,EAAME,YAAI,QAAI,CAAEC,MAA6B,IAAtBC,OAAOC,OAAOF,MAAcG,OAA+B,IAAvBF,OAAOC,OAAOC,SAAgB,mBAA/HC,EAAO,KAAEC,EAAU,KAC1B,EAAmBP,mBAAuB,QAAf,EAACD,EAAMS,gBAAQ,QAAI,OAAvCA,EAA6C,iBAArC,GACf,EAAwDR,qBAA2B,mBAA5ES,EAAoB,KAAEC,EAAuB,KACpD,EAAwDV,qBAA2B,mBAA5EW,EAAoB,KAAEC,EAAuB,KACpD,EAAoDZ,oBAAS,kBAAMD,EAAMc,oBAAuBd,EAAMc,oBAAsB,EAAI,EAAId,EAAMc,oBAAuB,EAAG,IAAC,mBAA9JA,EAAmB,KAC1B,GADgD,KACUb,sBAA2B,mBAA9Ec,EAAqB,KAAEC,EAAwB,KACtD,EAAkCf,qBAAgB,mBAA3CgB,EAAS,KAAEC,EAAY,KAC9B,EAAkCjB,mBAAS,GAAE,oBAAtCkB,GAAS,MAAEC,GAAY,MAC9B,GAAgCnB,qBAA2B,qBAApDoB,GAAQ,MAAEC,GAAW,MAC5B,GAA8BrB,mBAA4B,IAAG,qBACvDsB,IADQ,MAAY,MACTC,iBAAyB,OAC1C,GAAgCvB,qBAAkB,qBAA3CwB,GAAQ,MAAEC,GAAW,MAE5B,GAAgCzB,qBAAkB,qBAA3C0B,GAAQ,MAAEC,GAAW,MAC5B,GAA8C3B,qBAAkB,qBAAzD4B,GAAe,MAAEC,GAAkB,MAC1C,GAA8B7B,qBAAmB,qBAA1C8B,GAAO,MAAEC,GAAU,MAC1B,GAAwB/B,qBAAe,qBAA1BgC,IAAF,MAAS,OACpB,GAA4BhC,qBAAgC,qBAArDiC,GAAM,MAAEC,GAAS,MACxB,GAAwClC,mBAAS,GAAE,qBAA5CmC,GAAY,MAAEC,GAAe,MACpC,GAAwCpC,mBAAS,GAAE,qBAA5CqC,GAAY,MAAEC,GAAe,MACpC,GAAgCtC,mBAAsB,UAAS,qBAAxDuC,GAAQ,MAAEC,GAAW,MAC5B,GAAoCxC,mBAAqC,QAA7B,EAAaD,EAAM0C,kBAAU,QAAI,QAAO,qBAA7EA,GAAU,MACjB,IADgC,MACAzC,mBAAS,IAAE,qBAApC0C,GAAQ,MAAEC,GAAW,MAE5B,GAAsC3C,mBAAS,IAAG,qBAA3C4C,GAAW,MAAEC,GAAc,MAClC,GAAqB7C,mBAAyB,QAAjB,EAACD,EAAM+C,kBAAU,QAAI,IAA3CA,GAA8C,kBAApC,GACXC,GAAmBxB,iBAA0B,MACnD,GAAgCvB,oBAAkB,GAAM,qBAAjDgD,GAAQ,MAAEC,GAAW,MAEtBC,GAAgB3B,kBAAgB,GAChC4B,GAAc5B,iBAAY,MAC1B6B,GAAW7B,iBAAgC,MAC3C8B,GAAY9B,mBACZ+B,GAAY/B,mBACZgC,GAAWhC,iBAAyB,MAE1CiC,qBAAU,WACN,GAAI1C,GAAyBE,EAAW,CACpC,IAAMyC,EAAc3C,EAAsBT,QAAU,EAAIQ,GAAuB,EAChD,IAA/BC,EAAsB4C,MAAchD,EAAwB,CACxDiD,IAAK7C,EAAsB6C,IAC3BD,KAAM5C,EAAsB4C,KAC5BxD,MAAOY,EAAsBZ,MAC7BG,OAAQoD,IAEmB,IAA/B3C,EAAsB4C,MAAc9C,EAAwB,CACxD+C,IAAK7C,EAAsBT,OAASoD,EACpCC,KAAM5C,EAAsB4C,KAC5BxD,MAAOY,EAAsBZ,MAC7BG,OAAQoD,IAEZpC,GAAY,CACRsC,IAAK3C,EAAUX,QAAU,EAAIQ,GAAuB,EACpD6C,KAAM,EACNxD,MAAOc,EAAUd,MACjBG,OAAQW,EAAUX,OAASQ,GAEnC,CACJ,GAAG,CAACC,EAAuBE,EAAWE,GAAWL,IAEjD,IAAM+C,GAAY,iDAAG,WAAOC,GAAU,oGAAK,IAAIC,SAAQ,SAACC,EAASC,GAC7D,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,cAAcN,GACrBI,EAAOG,OAAS,kBAAML,EAAQE,EAAOhC,OAAQ,EAC7CgC,EAAOI,QAAU,SAAAC,GAAK,OAAIN,EAAOM,EAAO,CAC5C,KAAE,2DALgB,sCAOZC,GAAgC,iDAAG,WAAOnD,GAAyB,8FAChE2B,GAAiByB,SAAYpB,GAASoB,QAAO,iDAKlD,GAJAzB,GAAiByB,QAAQnE,OAASe,EAASf,OAC3C0C,GAAiByB,QAAQtE,MAAQkB,EAASlB,MACpCuE,EAAM1B,GAAiByB,QAAQE,WAAW,MACxCf,EAA6BvC,EAA7BuC,IAAKD,EAAwBtC,EAAxBsC,KAAMrD,EAAkBe,EAAlBf,OAAQH,EAAUkB,EAAVlB,OAEvBuE,EAAI,CAAD,gBAe6D,OAXhEA,EAAKE,UACDvB,GAASoB,QACTd,EACAC,EACAzD,EACAG,EACA,EACA,EACAH,EACAG,GAEAuE,EAAY7B,GAAiByB,QAAQK,YAAYC,WAAU,kBACxDF,GAAS,4CAEvB,gBAzBqC,sCA2BhCG,GAAc,iDAAG,WAAOC,EAAeC,GAAwB,mGAC3CC,GAAaF,GAAO,KAAD,EAGpB,GAHfG,EAAO,OACPC,EAAOC,GAAcF,EAAS7E,GACpCmB,GAAYuD,GACZ1C,GAAgB8C,IACZH,EAAe,CAAD,gBAGL,OAFTtD,GAAYqD,GACZ5C,GAAgBgD,GAAK,KACrBlD,GAAS,UAAOoD,GAAaN,GAAM,+EAE1C,gBAVmB,wCAYdO,GAAc,iDAAG,WAAOC,EAAkBC,GAAoB,mGAC1CP,GAAaM,GAAS,OAKjC,GALLL,EAAO,OACPC,EAAOC,GAAcF,EAAS7E,GACpCqB,GAAY6D,GAEZpD,GAAgBgD,GAAK,MACpBK,GAAU,sBAAa,OAAb,KAAIvD,GAAS,UAAOoD,GAAaE,GAAS,+EACxD,gBAPmB,wCASdN,GAAY,iDAAG,WAAOQ,GAAiB,iFAEtB,OADfC,EAAM,IAAIC,OACVC,IAAMH,EAAS,SACbC,EAAIG,SAAQ,gCACX,CAAE5F,MAAOyF,EAAII,aAAc1F,OAAQsF,EAAIK,gBAAe,2CAChE,gBALiB,sCAOZX,GAAgB,SAACY,EAAiBC,GACpC,GAAIA,EAAW7F,QAAU4F,EAAU5F,QAAU6F,EAAWhG,OAAS+F,EAAU/F,MACvE,OAAO,EAGP,IAAMiG,EAASD,EAAWhG,MAAQ+F,EAAU/F,MACtCkG,EAASF,EAAW7F,OAAS4F,EAAU5F,OAC7C,OAAO8F,EAASC,EAASA,EAASD,CAE1C,EAEME,GAAa,iDAAG,kGACoB,MAAhCC,EAAwB,QAAnB,EAAGhF,GAASkD,eAAO,aAAhB,EAAkB8B,QACnBA,EAAMC,OAAS,GAAC,iBAED,OAAxB/D,GAAY,aAAY,SACEoB,GAAa0C,EAAM,IAAG,OAA/B,OAAXE,EAAW,gBACXzB,GAAeyB,GAAuB,GAAK,+BAIjD/E,QAAYgF,GAAW,4CAE9B,kBAZkB,mCAcbC,GAAY,iDAAG,oGACb1D,GAAS,CAAD,mDACK,WAAbT,GAAqB,iCACGgC,GAAiC,2BAAKvD,GAAS,IAAG2C,IAAK,EAAGD,KAAM,KAAI,OACtD,OADhCiD,EAAS,SACF5B,GAAe4B,GAAU,SACdpC,GAAiCnD,IAAU,QAA7DwF,EAAS,SACFrB,GAAeqB,GAC5B1E,QAAUuE,GACVjE,GAAY,aAAY,2BAGN,SAAbD,KAAuBT,GAAO,iBACnCA,GAAQ+E,mBAAmBC,OAAM,iDAAC,WAAOC,GAAiB,qFAClDA,EAAK,CAAD,+BACgBnD,GAAamD,GAAK,OAAhC/B,EAAK,OACXO,GAAeP,GACfxC,GAAY,aAAY,2CAE/B,mDANgC,IAM/B,wBAGM,GAHN,KAGFd,IAAQ,sBAAa,OAAb,KAAIQ,GAAS,UAAOoD,GAAa5D,IAAS,+EAEzD,kBAvBiB,mCAyBZ4D,GAAY,iDAAG,WAAON,GAAa,oGAC9B1B,GAAUkB,QAASwC,UAAUhC,GAC/BiC,MAAK,SAAChF,GAGH,OAFAiF,QAAQC,IAAI,SAAUlF,GACtBU,GAAY,GACL,CAAEyE,SAAS,EAAMnF,SAC5B,IACCoF,OAAM,SAACC,GAEJ,OADAJ,QAAQ5C,MAAM,YAAagD,GACpB,CAAEF,SAAS,EAAO9C,MAAOgD,EACpC,KAAE,2CAET,gBAZiB,sCAkGlB9D,qBAAU,WACFR,KAAaG,GAAYqB,SACzBrB,GAAYqB,QAAU+C,YAAW,gCAAC,mGACzBrE,GAAcsB,QAAQ,CAAD,gBACM,OAA5BtB,GAAcsB,SAAU,EAAI,SACRD,GAAiCnD,IAAU,OAApD,KAAL4D,EAAK,QACD,CAAD,gBACoB,OAAzBnD,GAAmBmD,GAAM,SACJM,GAAaN,GAAa,OAEL,GAFpC/C,EAAM,OACZC,GAAUD,GAAO,KACblC,EAAMyH,iBAAmBvF,EAAOA,QAAM,uCAAUlC,EAAMyH,gBAAgBvF,EAAOA,QAAO,uEAC9EsD,GAAeP,GAAO,GAAK,QAEf,OADlBxC,GAAY,aACZS,IAAY,GAAM,2BAI1BwE,YAAW,WACPvE,GAAcsB,SAAU,CAC5B,GAAG,KAAK,4CAEb,KACH0C,QAAQC,IAAI,0BAA2BhE,GAAYqB,WAGnD0C,QAAQC,IAAI,4BAA6BhE,GAAYqB,SACrDtB,GAAcsB,SAAU,EACxBrB,GAAYqB,SAAWkD,cAAcvE,GAAYqB,SACjDrB,GAAYqB,QAAU,KAE9B,GAAG,CAACxB,KAEJ,IAAM2E,GAAS,iDAAG,uHAEwBC,UAAUC,aAAaC,aAAa,CAClEC,OAAO,EACPC,MAAO,CACHC,WAAY,iBAElB,OALIC,EAAmB,OAMrB9E,GAASoB,SAAW0D,IACpB9E,GAASoB,QAAQ2D,UAAYD,EAc7B7E,GAAUmB,QAAU0D,EACpB9E,GAASoB,QAAQ4D,OAAOnB,MAAK,WACzBhG,EAAa,CACTf,MAAOkD,GAASoB,QAAS6D,WACzBhI,OAAQ+C,GAASoB,QAAS8D,cAE9BvH,EAAyB,CACrB4C,IAAKP,GAASoB,QAAS+D,UACvB7E,KAAMN,GAASoB,QAASgE,WACxBtI,MAAOkD,GAASoB,QAASiE,YACzBpI,OAAQ+C,GAASoB,QAASkE,eAE9BvH,GAAaiC,GAASoB,QAASkE,aAAetF,GAASoB,QAAS8D,aAChE/H,EAAW,CAAEF,OAAQ+C,GAASoB,QAASkE,aAAe,IAAKxI,MAAOyI,KAAKC,IAAIxF,GAASoB,QAASiE,YAAanI,EAAQJ,QACtH,KACH,gDAGDgH,QAAQC,IAAI,KAAIrC,YAAW,yDAGlC,kBA5Cc,mCA8CT+D,GAAY,WACdxF,IAAaA,GAAUmB,SAAWnB,GAAUmB,QAAQsE,YAAYC,SAAQ,SAACC,GACrEA,EAAMC,MACV,IACA/B,QAAQC,IAAI,aAChB,EAEA3D,qBAAU,WAAO,IAAD,UACZ0D,QAAQC,IAAI,YAAanG,EAA2B,QAAlB,EAAEoC,GAASoB,eAAO,aAAhB,EAAkBkE,aAA8B,QAAlB,EAAEtF,GAASoB,eAAO,aAAhB,EAAkBiE,YAA6B,QAAlB,EAAErF,GAASoB,eAAO,aAAhB,EAAkB+D,UAA2B,QAAlB,EAAEnF,GAASoB,eAAO,aAAhB,EAAkBgE,WAA4B,QAAlB,EAAEpF,GAASoB,eAAO,aAAhB,EAAkB0E,cAChLhC,QAAQC,IAAI,WAAY/F,GAC5B,GAAG,CAACJ,IAEJ,IAzIkBmI,GAyIZC,GAAU,iDAAG,wFAcZ,OAZH9F,GAAUkB,QAAU6E,IAAUC,aAAa,CACvCC,OAAQ,SAACC,GACLtC,QAAQC,IAAIqC,GAGK,qBAAbA,EAAEC,OACF9G,GAAY6G,EAAE9G,SAAW,IAAO,IAAO8G,EAAE9G,UAGzCC,GAAY,IAEpB,IACD,SACGW,GAAUkB,QAAQkF,OAAO,KAAD,kBACxBpG,GAAUkB,QAAQmF,aAAanJ,GAAU,KAAD,kBACxC8C,GAAUkB,QAAQ4E,WAAW5I,GAAU,KAAD,kBACtCmH,KAAW,OACjBnF,GAAY,UAAS,4CAExB,kBArBe,mCAuBVoH,GAAS,iDAAG,wFACG,GADH,KACdtG,GAAUkB,SAAO,qCAAUlB,GAAUkB,QAAQoF,YAAW,2CAE3D,kBAHc,mCAsBf,OAjBApG,qBAAU,WAEN,OADA4F,KACO,WACHP,KACAe,IACJ,CACJ,GAAG,IAEHpG,qBAAU,WACW,WAAbjB,GACAoF,KAGAkB,IAER,GAAG,CAACtG,KAGA,eAACsH,EAAA,EAAG,CAACC,MAAO,CAAEzJ,OAAQC,EAAQD,OAAQH,MAAOI,EAAQJ,MAAO6J,SAAU,WAAYC,OAAQ,kBAAmBC,gBAAiB,QAASC,QAAS,MAAOC,OAAQ,QAAS,UACpK,cAACN,EAAA,EAAG,CAACC,MAAO,CAAEC,SAAU,WAAYrG,KAAM,EAAG0G,MAAO,EAAGzG,IAAK,EAAG0G,OAAQ,GAAI,SACvE,eAACR,EAAA,EAAG,CAACC,MAAO,CAAEC,SAAU,WAAYO,SAAU,WAAY,UAmBxC,WAAb/H,IAAyB,uBACtBgI,IAAKnH,GACLoH,UAAQ,EACRC,OAAK,EACLC,aAAW,EACXZ,MAAO,CACHa,SAAUrK,EAAQJ,SAWZ,WAAbqC,IAAyB9B,GACtB,cAACoJ,EAAA,EAAG,CAACC,MAAK,2BAAOrJ,GAAoB,IAAEsJ,SAAU,WAAYG,QAAS,MAAOU,WAAY,UAAU,SAC9FhJ,IAAmBoB,IAAY,qBAAK6C,IAAKjE,GAAiBkI,MAAO,CAAEa,SAAU,OAAQE,UAAW,YAG3F,WAAbtI,IAAyB5B,GAAwB,cAACkJ,EAAA,EAAG,CAACC,MAAK,2BAAOnJ,GAAoB,IAAEoJ,SAAU,WAAYG,QAAS,MAAOU,WAAY,YAE7H,SAAbrI,IAAuB,cAAC,IAAO,CAC5BlC,OAAQC,EAAQD,OAChBH,MAAOI,EAAQJ,MACf4K,OAAQzI,GAERwD,IAAKrE,GACLuJ,SAAU,EACVC,iBAAkB,GAClBC,gBAAiB,GACjBL,YAAY,EACZM,YAAY,EAEZC,kBAAkB,EAClBC,cAAe,SAACC,GACZtJ,GAAWsJ,EACf,EACAC,QAAQ,EACRxB,MAAO,CACHe,UAAWvK,EAAQD,OACnBsK,SAAUrK,EAAQJ,SAMT,cAAbqC,IAA4Bb,IAC5B,qBAAK6I,IAAKhH,GAAUuG,MAAO,CAAE1E,KAAMjD,IAAgB0D,IAAKnE,GAAU6J,IAAI,YAE1E,wBAAQhB,IAAKxH,GAAkByI,QAAM,IAEpCvJ,IAAUA,GAAOA,UAAyB,IAAbe,IAAmC,IAAbN,KAAgC,IAAbM,MAlQrEmG,GAmQ0B,cAAf1G,GAA6BR,GAAOA,OAAOwJ,KAAKC,WAA6B,SAAfjJ,GAAwBR,GAAOA,OAAOwJ,KAAKE,MAAQ1J,GAAOA,OAAOwJ,KAAKG,MAjQtJzC,GAAO0C,KAAI,SAACC,EAAMC,GAAW,IAAD,QACzBC,EAAG,UAAMvJ,GAAU,YAAIsJ,GAE7B,OAAOD,EAAKhJ,WAAaA,GAAa,sBAAemJ,GAAID,EACrDE,QAAO,gCAAE,2FACDF,IAAQpJ,GAAW,gBAGL,GAFdC,GAAe,IACfb,GAAQ,IAAG,KACXjC,EAAMoM,UAAQ,qCAAUpM,EAAMoM,SAAS,IAAG,8BAK5B,GAFdtJ,GAAemJ,GACfhK,GAAQ8J,EAAKM,MAAK,KAClBrM,EAAMoM,UAAQ,uCAAUpM,EAAMoM,SAASL,EAAKM,MAAK,4CAGzDtC,MAAO,CACHC,SAAU,WACVrG,KAAMoI,EAAKO,KAAKC,IAAMtJ,GAAW9B,GAAYiB,KAAiBa,GAAW,GAAK1C,EAAQJ,MAASiC,IAA6C,QAAjC,EAAoB,QAApB,EAAIoB,GAASiB,eAAO,aAAhB,EAAkBiE,mBAAW,QAAI,IAAO,GACvJ9E,IAAKX,IAAY8I,EAAKO,KAAKE,KAAwB,QAAlB,EAAU,OAATvL,QAAS,IAATA,OAAS,EAATA,EAAWX,cAAM,QAAI,IAAsB,QAArB,EAAa,OAARe,SAAQ,IAARA,QAAQ,EAARA,GAAUf,cAAM,QAAI,IAAM,GAAKa,GAAY4K,EAAKO,KAAKE,GAAKpK,GACvHjC,OAAQ4L,EAAKO,KAAKG,GAAKV,EAAKO,KAAKC,KAAOtJ,GAAW9B,GAAYiB,IAC/D9B,QAASyL,EAAKO,KAAKI,GAAKX,EAAKO,KAAKE,KAAOvJ,GAAW9B,GAAYiB,IAChE6H,OAAQpH,KAAgBoJ,EAAM,kBAAoB,iBAClD/B,gBAAiB,cACjByC,MAAO,MACPpC,SAAU,WACZ,cAAE,qBAAKR,MAAO,CAAEC,SAAU,WAAYO,SAAU,UAAWjK,OAAQ,QAAS,SAC1E,qBAAKyJ,MAAO,CAAEC,SAAU,WAAY7J,MAAO,MAAOmK,OAAQ,OAAQqC,MAAO,UAAWpC,SAAU,SAAUqC,SAAU,OAAQC,QAAS,QAASC,WAAY,UAAW,SAC9Jf,EAAKM,WAzB8BJ,GA4BtC,IAEd,WA2OqB,IAAbhJ,IAAmC,cAAbT,IAA4BG,GAAW,GAAKA,GAAW,GAC7E,cAACmH,EAAA,EAAG,CAACiD,GAAI,CACLnJ,IAA8B,QAA3B,EAAsB,OAApBhD,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBgD,WAAG,QAAI,EAClCD,KAAM,EACN2G,QAAqC,QAA7B,EAAqB,OAApB1J,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBN,cAAM,QAAI,IAA+B,QAA9B,EAAyB,OAApBM,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBgD,WAAG,QAAI,GAC5EyG,MAAO,EACPL,SAAU,WACV6C,QAAS,OACTG,WAAY,SACZC,eAAgB,UAElB,SACE,eAACnD,EAAA,EAAG,CAACiD,GAAI,CAAE/C,SAAU,WAAY6C,QAAS,eAAgB,UACtD,cAACK,EAAA,EAAgB,CAAChN,KAAM,GAAIiN,QAAQ,cAAcC,MAAO,IAAMzK,KAC/D,cAACmH,EAAA,EAAG,CACAiD,GAAI,CACAnJ,IAAK,EACLD,KAAM,EACN2G,OAAQ,EACRD,MAAO,EACPL,SAAU,WACV6C,QAAS,cACTG,WAAY,SACZC,eAAgB,UAClB,SAEF,cAACI,EAAA,EAAU,CACPF,QAAQ,UACRG,UAAU,MACVX,MAAM,iBACNC,SAAS,OACTG,GAAI,CAAE5M,MAAOI,EAAQJ,OAAQ,mBAC5ByI,KAAK2E,MAAM,IAAM5K,IAAS,cAiC9C,cAAC6K,EAAA,EAAG,CAAC,aAAW,MAAMtN,KAAK,QAAQ6J,MAAO,CACvCC,SAAU,WACVM,OAAQ,GACRD,MAAO,GACR8B,QAtWa,WACpB1J,GAAY,UACZf,QAAYgF,GACZ9E,QAAY8E,GACZvE,QAAUuE,EACd,EAiWoC,SACxB,cAAC,IAAiB,MAGtB,cAAC8G,EAAA,EAAG,CAAC,aAAW,SAAStN,KAAK,QAAQ6J,MAAO,CACzCC,SAAU,WACVM,OAAQ,EACRD,MAAO,GACR8B,QArTe,WAClB5K,GAASkD,UACTlD,GAASkD,QAAQgJ,QACjBlM,GAASkD,QAAQ8B,MAAQ,KAEjC,EAgTsC,SAC1B,cAAC,IAAc,MAGlB,cAACiH,EAAA,EAAG,CAACrB,QAAS,WAAQ1J,GAAY,QAASN,QAAUuE,EAAW,EAAGxG,KAAK,QAAQ6J,MAAO,CACpFC,SAAU,WACVM,OAAQ,GACRD,MAAO,GACT,SACE,cAAC,IAAY,MAGjB,cAACmD,EAAA,EAAG,CAAC,aAAW,aAAatN,KAAK,QAAQiM,QAASxF,GAAcoD,MAAO,CACpEC,SAAU,WACVM,OAAQ,EACR3G,KAAMpD,EAAQJ,MAAQ,EAAI,IAC5B,SACE,cAAC,IAAe,CAACyM,SAAS,YAG7B,cAACc,EAAA,EAAU,CAAC,aAAW,UAAUvB,QApZ3B,WACM,cAAb3J,GACAH,IAAgB,SAAAgD,GAAI,OAAIA,EAAO,EAAG,IAEhB,SAAb7C,IACLD,IAAgB,SAAA8C,GAAI,OAAIA,EAAO,EAAG,GAE1C,EA6Y2DnF,KAAK,QAAQ6J,MAAO,CACnEC,SAAU,WACVM,OAAQ,EACRD,MAAO9J,EAAQJ,MAAQ,EAAI,KAC7B,SACE,cAAC,IAAU,CAACyM,SAAS,QAAQD,MAAM,WAEtC,cAACe,EAAA,EAAU,CAAC,aAAW,WAAWvB,QAlZ3B,WACK,cAAb3J,GACAH,IAAgB,SAAAgD,GAAI,OAAIA,EAAO,EAAG,IAEhB,SAAb7C,IACLD,IAAgB,SAAA8C,GAAI,OAAIA,EAAO,EAAG,GAE1C,EA2Y6DnF,KAAK,QAAQ6J,MAAO,CACrEC,SAAU,WACVM,OAAQ,EACR3G,KAAMpD,EAAQJ,MAAQ,EAAI,KAE5B,SACE,cAAC,IAAW,CAACyM,SAAS,QAAQD,MAAM,WAWxC,cAACgB,EAAA,EAAM,CAACZ,GAAI,CACR/C,SAAU,WACVM,OAAQ,EACR3G,KAAM,EACNuG,gBAAiB,QACjBE,OAAQ,EACRwD,aAAc,OACdhB,SAAU,OACXD,MAAM,YAAYkB,QAAS5K,GAAU6K,SAAU,SAACC,EAAGF,GAAgB,OAAK3K,GAAY2K,EAAQ,IAK/F,uBACIG,OAAO,oBACPxD,IAAKjJ,GAAU0M,KAAK,OACpBH,SAAUxH,GACV6F,QAAS,SAAC+B,GAAaA,EAAMC,OAA4Bf,MAAQ,EAAG,EACpE3B,QAAM,MAKtB,CC3qBA,IAkCe2C,EAlCH,WAEV,MAAgCC,IAAMpO,SAA6B,MAAK,mBACxE,GADe,KAAa,KACJA,mBAAS,KAAG,mBAA7BoM,EAAI,KAAEpK,EAAO,KAUdwF,EAAe,iDAAG,WAAOvF,GAAiC,iFACkB,KAA1EoM,EAAIpM,EAAOwJ,KAAKG,MAAM0C,MAAK,SAAAC,GAAI,OAAIA,EAAKnC,KAAKoC,WAAW,iBAAiB,KACzE,CAAD,eACY,OAAfxM,EAAQqM,EAAEjC,MAAK,mBACR,GAAI,OACX,0BACK,GAAK,2CACb,gBAPoB,sCASfD,EAAQ,iDAAG,WAAOC,GAAY,2EAClCpK,EAAQoK,GAAK,2CACd,gBAFa,sCAId,OACE,sBAAKtC,MAAO,CAAE2E,UAAW,UAAW,UAClC,qBAAK3E,MAAO,CAAEK,OAAQ,OAAQwC,SAAU,QAAS,2BAAaP,KAC9D,cAACtM,EAAG,CAAC0H,gBAAiBA,EAAiBvH,KAAM,CAAEC,MAAO,IAAKG,OAAQ,KAAO8L,SAAUA,MAG1F,EC/BAuC,IAASC,OAAO,cAAC,EAAG,IAAKC,SAASC,cAAc,S","file":"static/js/main.e8a6c0a9.chunk.js","sourcesContent":["import { useCallback, useEffect, useRef, useState } from \"react\";\r\nimport { Stream } from \"stream\";\r\nimport Cropper from 'react-cropper'\r\nimport \"cropperjs/dist/cropper.css\";\r\nimport { Box, CircularProgress, Fab, FormControlLabel, Grid, Icon, IconButton, Switch, TextField, Tooltip, Typography } from \"@mui/material\";\r\nimport Tesseract, { RecognizeResult } from 'tesseract.js';\r\nimport PhotoCameraIcon from '@mui/icons-material/PhotoCamera';\r\nimport ZoomInIcon from '@mui/icons-material/ZoomIn';\r\nimport ZoomOutIcon from '@mui/icons-material/ZoomOut';\r\nimport FileUploadIcon from '@mui/icons-material/FileUpload';\r\nimport HighlightAltIcon from '@mui/icons-material/HighlightAlt';\r\nimport DeleteForeverIcon from '@mui/icons-material/DeleteForever';\r\nimport PlayCircleIcon from '@mui/icons-material/PlayCircle';\r\nimport DeselectIcon from '@mui/icons-material/Deselect';\r\nimport FormatShapesIcon from '@mui/icons-material/FormatShapes';\r\nimport LineStyleIcon from '@mui/icons-material/LineStyle';\r\nimport HdrAutoIcon from '@mui/icons-material/HdrAuto';\r\nimport CenterFocusStrongIcon from '@mui/icons-material/CenterFocusStrong';\r\nimport { fontSize } from \"@mui/system\";\r\n\r\ntype Position = {\r\n    top: number,\r\n    left: number\r\n}\r\n\r\ntype Size = {\r\n    width: number,\r\n    height: number\r\n}\r\n\r\ntype ResultMode = \"line\" | \"word\" | \"paragraph\"\r\ntype DisplayMode = \"camera\" | \"crop\" | \"recognize\"\r\n\r\ntype RecognizeImageResult = { success: boolean, result?: Tesseract.RecognizeResult, error?: any }\r\n\r\ntype TesseractBlock = Tesseract.Line | Tesseract.Word | Tesseract.Paragraph\r\n\r\ninterface Props {\r\n    size?: Size\r\n    language?: string,\r\n    cropArea?: Position & Size\r\n    videcropHeightRatio?: number,\r\n    confidence?: number\r\n    resultMode?: ResultMode\r\n    onSelect?: (text: string) => Promise<void>\r\n    onExamineResult?: (result: Tesseract.RecognizeResult) => Promise<boolean>\r\n}\r\n\r\nexport default function OCR(props: Props) {\r\n    const [OCRSize, setOCRSize] = useState<Size>(props.size ?? { width: window.screen.width * 0.95, height: window.screen.height * 0.75 })\r\n    const [language] = useState(props.language ?? \"eng\")\r\n    const [upperPanelPosAndSize, setUpperPanelPosAndSize] = useState<Position & Size>()\r\n    const [lowerPanelPosAndSize, setLowerPanelPosAndSize] = useState<Position & Size>()\r\n    const [videcropHeightRatio, setCropHeightPercent] = useState(() => props.videcropHeightRatio ? (props.videcropHeightRatio > 1 ? 1 : props.videcropHeightRatio) : 0.2)\r\n    const [videoOffsetPosAndSize, setVideoOffsetPosAndSize] = useState<Position & Size>()\r\n    const [videoSize, setVideoSize] = useState<Size>()\r\n    const [videoZoom, setVideoZoom] = useState(1)\r\n    const [cropArea, setCropArea] = useState<Position & Size>()\r\n    const [cameras, setCameras] = useState<MediaDeviceInfo[]>([]);\r\n    const inputRef = useRef<HTMLInputElement>(null);\r\n    const [imageSrc, setImageSrc] = useState<string>()\r\n\r\n    const [cropData, setCropData] = useState<string>();\r\n    const [cropDataPreview, setCropDataPreview] = useState<string>();\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n    const [text, setText] = useState<any>()\r\n    const [result, setResult] = useState<RecognizeImageResult>()\r\n    const [zoomCropData, setZoomCropData] = useState(1)\r\n    const [zoomImageSrc, setZoomImageSrc] = useState(1)\r\n    const [scenario, setScenario] = useState<DisplayMode>(\"camera\")\r\n    const [resultMode, setResultMode] = useState<ResultMode>(props.resultMode ?? \"line\")\r\n    const [progress, setProgress] = useState(0)\r\n    //const [progressStatus, setProgressStatus] = useState(\"\")\r\n    const [selectedBox, setSelectedBox] = useState(\"\")\r\n    const [confidence] = useState(props.confidence ?? 20)\r\n    const previewCanvasRef = useRef<HTMLCanvasElement>(null)\r\n    const [autoMode, setAutoMode] = useState<boolean>(false)\r\n\r\n    const processingRef = useRef<boolean>(false)\r\n    const intervalRef = useRef<any>(null)\r\n    const videoRef = useRef<HTMLVideoElement | null>(null);\r\n    const streamRef = useRef<MediaStream>()\r\n    const workerRef = useRef<Tesseract.Worker>()\r\n    const imageRef = useRef<HTMLImageElement>(null)\r\n\r\n    useEffect(() => {\r\n        if (videoOffsetPosAndSize && videoSize) {\r\n            const panelHeight = videoOffsetPosAndSize.height * (1 - videcropHeightRatio) / 2\r\n            videoOffsetPosAndSize.left === 0 && setUpperPanelPosAndSize({\r\n                top: videoOffsetPosAndSize.top,\r\n                left: videoOffsetPosAndSize.left,\r\n                width: videoOffsetPosAndSize.width,\r\n                height: panelHeight\r\n            })\r\n            videoOffsetPosAndSize.left === 0 && setLowerPanelPosAndSize({\r\n                top: videoOffsetPosAndSize.height - panelHeight,\r\n                left: videoOffsetPosAndSize.left,\r\n                width: videoOffsetPosAndSize.width,\r\n                height: panelHeight\r\n            })\r\n            setCropArea({\r\n                top: videoSize.height * (1 - videcropHeightRatio) / 2,\r\n                left: 0,\r\n                width: videoSize.width,\r\n                height: videoSize.height * videcropHeightRatio\r\n            })\r\n        }\r\n    }, [videoOffsetPosAndSize, videoSize, videoZoom, videcropHeightRatio])\r\n\r\n    const fileToBase64 = async (file: Blob) => new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onload = () => resolve(reader.result);\r\n        reader.onerror = error => reject(error);\r\n    });\r\n\r\n    const cropImageInSelectedAreaFromVideo = async (cropArea: Position & Size) => {\r\n        if (!previewCanvasRef.current || !videoRef.current) return\r\n        previewCanvasRef.current.height = cropArea.height;\r\n        previewCanvasRef.current.width = cropArea.width\r\n        const ctx = previewCanvasRef.current.getContext('2d');\r\n        const { top, left, height, width } = cropArea;\r\n        //console.log(videoRef.current.videoHeight, videoRef.current.videoWidth, videoRef.current.height, videoRef.current.width)\r\n        if (ctx) {\r\n            // ctx.clearRect(0, 0, videoSize!.width, videoSize!.height);\r\n            // ctx.fillStyle = \"rgba(255, 255, 255,1)\";\r\n            // ctx.fillRect(0, 0, videoSize!.width, videoSize!.height);\r\n            ctx!.drawImage(\r\n                videoRef.current,\r\n                left,\r\n                top,\r\n                width,\r\n                height,\r\n                0,\r\n                0,\r\n                width,\r\n                height\r\n            );\r\n            let newimgUri = previewCanvasRef.current.toDataURL().toString();\r\n            return newimgUri;\r\n        }\r\n    }\r\n\r\n    const updateImageSrc = async (image: string, copyToCropDate?: boolean) => {\r\n        const imgSize = await getImageSize(image);\r\n        const zoom = calculateZoom(imgSize, OCRSize);\r\n        setImageSrc(image);\r\n        setZoomImageSrc(zoom)\r\n        if (copyToCropDate) {\r\n            setCropData(image);\r\n            setZoomCropData(zoom)\r\n            setResult(await processImage(image))\r\n        }\r\n    }\r\n\r\n    const updateCropData = async (imageUrl: string, updateOnly?: boolean) => {\r\n        const imgSize = await getImageSize(imageUrl)\r\n        const zoom = calculateZoom(imgSize, OCRSize)\r\n        setCropData(imageUrl);\r\n        //setCropDataSize(imgSize)\r\n        setZoomCropData(zoom)\r\n        !updateOnly && setResult(await processImage(imageUrl))\r\n    }\r\n\r\n    const getImageSize = async (imgBase64: string): Promise<Size> => {\r\n        let img = new Image()\r\n        img.src = imgBase64\r\n        await img.decode()\r\n        return { width: img.naturalWidth, height: img.naturalHeight }\r\n    }\r\n\r\n    const calculateZoom = (imageSize: Size, canvasSize: Size) => {\r\n        if (canvasSize.height >= imageSize.height && canvasSize.width >= imageSize.width) {\r\n            return 1\r\n        }\r\n        else {\r\n            const xScale = canvasSize.width / imageSize.width\r\n            const yScale = canvasSize.height / imageSize.height\r\n            return xScale > yScale ? yScale : xScale\r\n        }\r\n    }\r\n\r\n    const onInputChange = async () => {\r\n        const files = inputRef.current?.files;\r\n        if (files && files.length > 0) {\r\n            //const imageUrl = URL.createObjectURL(files[0])\r\n            setScenario(\"recognize\")\r\n            const imageBase64 = await fileToBase64(files[0])\r\n            await updateImageSrc(imageBase64 as string, true)\r\n\r\n        }\r\n        else {\r\n            setImageSrc(undefined);\r\n        }\r\n    }\r\n\r\n    const onOCRClicked = async () => {\r\n        if (autoMode) return;\r\n        if (scenario === \"camera\") {\r\n            const fullImage = await cropImageInSelectedAreaFromVideo({ ...videoSize!, top: 0, left: 0 })\r\n            fullImage && updateImageSrc(fullImage)\r\n            const cropImage = await cropImageInSelectedAreaFromVideo(cropArea!)\r\n            cropImage && updateCropData(cropImage)\r\n            setResult(undefined)\r\n            setScenario(\"recognize\")\r\n        }\r\n\r\n        else if (scenario === \"crop\" && cropper) {\r\n            cropper.getCroppedCanvas().toBlob(async (blob: Blob | null) => {\r\n                if (blob) {\r\n                    const image = await fileToBase64(blob)\r\n                    updateCropData(image as string);\r\n                    setScenario(\"recognize\")\r\n                }\r\n            })\r\n        }\r\n        else {\r\n            cropData && setResult(await processImage(cropData))\r\n        }\r\n    }\r\n\r\n    const processImage = async (image: string): Promise<RecognizeImageResult> => {\r\n        return workerRef.current!.recognize(image)\r\n            .then((result: RecognizeResult) => {\r\n                console.log(\"result\", result);\r\n                setProgress(1);\r\n                return { success: true, result };\r\n            })\r\n            .catch((err: any) => {\r\n                console.error(\"recognize\", err);\r\n                return { success: false, error: err };\r\n            });\r\n\r\n    }\r\n\r\n    const zoomIn = () => {\r\n        if (scenario === \"recognize\") {\r\n            setZoomCropData(zoom => zoom + 0.1)\r\n        }\r\n        else if (scenario === \"crop\") {\r\n            setZoomImageSrc(zoom => zoom + 0.1)\r\n        }\r\n    }\r\n\r\n    const zoomOut = () => {\r\n        if (scenario === \"recognize\") {\r\n            setZoomCropData(zoom => zoom - 0.1)\r\n        }\r\n        else if (scenario === \"crop\") {\r\n            setZoomImageSrc(zoom => zoom - 0.1)\r\n        }\r\n    }\r\n\r\n    const onDeleteClicked = () => {\r\n        setScenario(\"camera\")\r\n        setImageSrc(undefined)\r\n        setCropData(undefined)\r\n        setResult(undefined)\r\n    }\r\n\r\n    const onStyleChanged = () => {\r\n        if (resultMode === \"line\") {\r\n            setResultMode(\"paragraph\")\r\n        }\r\n        else if (resultMode === \"paragraph\") {\r\n            setResultMode(\"word\")\r\n        }\r\n        else {\r\n            setResultMode(\"line\")\r\n        }\r\n    }\r\n\r\n    const drawBBox = (blocks: (Tesseract.Line | Tesseract.Word | Tesseract.Paragraph)[]) => {\r\n\r\n        return blocks.map((item, index) => {\r\n            const key = `${resultMode}-${index}`\r\n\r\n            return item.confidence > confidence ? <div key={key} id={key}\r\n                onClick={async () => {\r\n                    if (key === selectedBox) {\r\n                        setSelectedBox('');\r\n                        setText('')\r\n                        props.onSelect && await props.onSelect('')\r\n                    }\r\n                    else {\r\n                        setSelectedBox(key);\r\n                        setText(item.text)\r\n                        props.onSelect && await props.onSelect(item.text)\r\n                    }\r\n                }}\r\n                style={{\r\n                    position: \"absolute\",\r\n                    left: item.bbox.x0 * (autoMode ? videoZoom : zoomCropData) + (autoMode ? 0 : (OCRSize.width - (zoomCropData * (imageRef.current?.offsetWidth ?? 0))) / 2),\r\n                    top: autoMode ? (item.bbox.y0 + ((videoSize?.height ?? 0) - (cropArea?.height ?? 0)) / 2) * videoZoom : item.bbox.y0 * zoomCropData,\r\n                    width: (item.bbox.x1 - item.bbox.x0) * (autoMode ? videoZoom : zoomCropData),\r\n                    height: (item.bbox.y1 - item.bbox.y0) * (autoMode ? videoZoom : zoomCropData),\r\n                    border: selectedBox === key ? \"1px solid green\" : \"1px dashed red\",\r\n                    backgroundColor: \"transparent\",\r\n                    color: \"red\",\r\n                    overflow: \"visible\"\r\n                }}> <div style={{ position: \"relative\", overflow: \"visible\", height: \"100%\" }}>\r\n                    <div style={{ position: \"absolute\", width: \"80%\", bottom: \"100%\", color: \"#fb4d3d\", overflow: \"hidden\", fontSize: \"10px\", display: \"block\", whiteSpace: \"nowrap\" }}>\r\n                        {item.text}\r\n                    </div>\r\n                </div>\r\n            </div > : null\r\n\r\n        })\r\n    }\r\n\r\n    const onFileUploadClick = () => {\r\n        if (inputRef.current) {\r\n            inputRef.current.click();\r\n            inputRef.current.files = null\r\n        }\r\n    }\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if (autoMode && !intervalRef.current) {\r\n            intervalRef.current = setInterval(async () => {\r\n                if (!processingRef.current) {\r\n                    processingRef.current = true\r\n                    const image = await cropImageInSelectedAreaFromVideo(cropArea!)\r\n                    if (image) {\r\n                        setCropDataPreview(image)\r\n                        const result = await processImage(image as any)\r\n                        setResult(result)\r\n                        if (props.onExamineResult && result.result && await props.onExamineResult(result.result)) {\r\n                            await updateCropData(image, true)\r\n                            setScenario(\"recognize\")\r\n                            setAutoMode(false)\r\n                            return;\r\n                        }\r\n                    }\r\n                    setTimeout(() => {\r\n                        processingRef.current = false\r\n                    }, 100);\r\n                }\r\n            }, 100)\r\n            console.log(\"intervalRef.current.set\", intervalRef.current)\r\n        }\r\n        else {\r\n            console.log(\"intervalRef.current.clear\", intervalRef.current)\r\n            processingRef.current = false\r\n            intervalRef.current && clearInterval(intervalRef.current)\r\n            intervalRef.current = null;\r\n        }\r\n    }, [autoMode])\r\n\r\n    const playVideo = async () => {\r\n        try {\r\n            const stream: MediaStream = await navigator.mediaDevices.getUserMedia({\r\n                audio: false,\r\n                video: {\r\n                    facingMode: \"environment\"\r\n                }\r\n            })\r\n            if (videoRef.current && stream) {\r\n                videoRef.current.srcObject = stream;\r\n                // videoRef.current.onloadedmetadata = () => {\r\n                //     setVideoSize({\r\n                //         width: videoRef.current!.videoWidth,\r\n                //         height: videoRef.current!.videoHeight\r\n                //     })\r\n                //     setVideoOffsetPosAndSize({\r\n                //         top: videoRef.current!.offsetTop,\r\n                //         left: videoRef.current!.offsetLeft,\r\n                //         width: videoRef.current!.offsetWidth,\r\n                //         height: videoRef.current!.offsetHeight\r\n                //     })\r\n                //     setVideoZoom(videoRef.current!.offsetHeight / videoRef.current!.videoHeight)\r\n                // }\r\n                streamRef.current = stream\r\n                videoRef.current.play().then(() => {\r\n                    setVideoSize({\r\n                        width: videoRef.current!.videoWidth,\r\n                        height: videoRef.current!.videoHeight\r\n                    })\r\n                    setVideoOffsetPosAndSize({\r\n                        top: videoRef.current!.offsetTop,\r\n                        left: videoRef.current!.offsetLeft,\r\n                        width: videoRef.current!.offsetWidth,\r\n                        height: videoRef.current!.offsetHeight\r\n                    })\r\n                    setVideoZoom(videoRef.current!.offsetHeight / videoRef.current!.videoHeight)\r\n                    setOCRSize({ height: videoRef.current!.offsetHeight + 100, width: Math.min(videoRef.current!.offsetWidth, OCRSize.width) })\r\n                })\r\n            }\r\n        }\r\n        catch (err: any) {\r\n            console.log(err.toString())\r\n        }\r\n\r\n    }\r\n\r\n    const stopVideo = () => {\r\n        streamRef && streamRef.current && streamRef.current.getTracks().forEach((track: any) => {\r\n            track.stop();\r\n        })\r\n        console.log(\"video stop\")\r\n    }\r\n\r\n    useEffect(() => {\r\n        console.log(\"videoSize\", videoSize, videoRef.current?.offsetHeight, videoRef.current?.offsetWidth, videoRef.current?.offsetTop, videoRef.current?.offsetLeft, videoRef.current?.offsetParent)\r\n        console.log(\"cropArea\", cropArea)\r\n    }, [videoSize])\r\n\r\n    const initialize = async () => {\r\n\r\n        workerRef.current = Tesseract.createWorker({\r\n            logger: (m: any) => {\r\n                console.log(m);\r\n                //setProcessStatus(m);\r\n                //setProgressStatus(m.status);\r\n                if (m.status === \"recognizing text\") {\r\n                    setProgress(m.progress < 0.02 ? 0.02 : m.progress);\r\n                }\r\n                else {\r\n                    setProgress(0.01);\r\n                }\r\n            },\r\n        });\r\n        await workerRef.current.load();\r\n        await workerRef.current.loadLanguage(language);\r\n        await workerRef.current.initialize(language);\r\n        await playVideo()\r\n        setScenario(\"camera\")\r\n\r\n    }\r\n\r\n    const terminate = async () => {\r\n        workerRef.current && await workerRef.current.terminate()\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        initialize()\r\n        return () => {\r\n            stopVideo();\r\n            terminate();\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (scenario === \"camera\") {\r\n            playVideo()\r\n        }\r\n        else {\r\n            stopVideo()\r\n        }\r\n    }, [scenario])\r\n\r\n    return (\r\n        <Box style={{ height: OCRSize.height, width: OCRSize.width, position: \"relative\", border: \"1px solid Black\", backgroundColor: \"black\", opacity: \"0.8\", margin: \"auto\" }}>\r\n            <Box style={{ position: \"absolute\", left: 0, right: 0, top: 0, bottom: 0 }} >\r\n                <Box style={{ position: \"relative\", overflow: \"visible\" }}>\r\n                    {/* {\r\n                        scenario === \"camera\" && <Webcam\r\n                            audio={false}\r\n                            ref={webcamRef}\r\n                            screenshotFormat=\"image/jpeg\"\r\n                            width={OCRSize.width}\r\n                            height={OCRSize.height}\r\n                            videoConstraints={{\r\n                                // deviceId: cameraDeviceId,\r\n                                facingMode: \"environment\",\r\n                                height: OCRSize.height,\r\n                                width: OCRSize.width,\r\n                            }}\r\n\r\n                        />\r\n                    } */}\r\n\r\n\r\n                    {scenario === \"camera\" && <video\r\n                        ref={videoRef}\r\n                        autoPlay\r\n                        muted\r\n                        playsInline\r\n                        style={{\r\n                            maxWidth: OCRSize.width\r\n                        }}\r\n                    // style={{ position: \"absolute\", top: 0, left: 0 }}\r\n                    ></video>}\r\n\r\n                    {/* {scenario === \"camera\" && <img\r\n                        style={{ zoom: zoomCropData }}\r\n                        src={cropData}\r\n                    />} */}\r\n\r\n\r\n                    {scenario === \"camera\" && upperPanelPosAndSize &&\r\n                        <Box style={{ ...upperPanelPosAndSize, position: \"absolute\", opacity: \"0.6\", background: \"green\" }} >\r\n                            {cropDataPreview && autoMode && <img src={cropDataPreview} style={{ maxWidth: \"100%\", maxHeight: \"100%\" }} />}\r\n                        </Box>\r\n                    }\r\n                    {scenario === \"camera\" && lowerPanelPosAndSize && <Box style={{ ...lowerPanelPosAndSize, position: \"absolute\", opacity: \"0.6\", background: \"green\" }} />}\r\n\r\n                    {scenario === \"crop\" && <Cropper\r\n                        height={OCRSize.height}\r\n                        width={OCRSize.width}\r\n                        zoomTo={zoomImageSrc}\r\n                        // preview=\".img-preview\"\r\n                        src={imageSrc}\r\n                        viewMode={1}\r\n                        minCropBoxHeight={10}\r\n                        minCropBoxWidth={10}\r\n                        background={false}\r\n                        responsive={true}\r\n                        // autoCropArea={1}\r\n                        checkOrientation={false} // https://github.com/fengyuanchen/cropperjs/issues/671\r\n                        onInitialized={(instance: Cropper) => {\r\n                            setCropper(instance);\r\n                        }}\r\n                        guides={true}\r\n                        style={{\r\n                            maxHeight: OCRSize.height,\r\n                            maxWidth: OCRSize.width\r\n                        }}\r\n                    />}\r\n\r\n\r\n                    {\r\n                        scenario === \"recognize\" && cropData &&\r\n                        <img ref={imageRef} style={{ zoom: zoomCropData }} src={cropData} alt=\"cropped\" />\r\n                    }\r\n                    <canvas ref={previewCanvasRef} hidden />\r\n\r\n                    {result && result.result && ((autoMode === false && progress === 1) || autoMode === true) &&\r\n                        drawBBox(resultMode === \"paragraph\" ? result.result.data.paragraphs : (resultMode === \"word\" ? result.result.data.words : result.result.data.lines))\r\n                    }\r\n\r\n                    {/* {autoMode === true && result && result.result &&\r\n                        drawBBox(resultMode === \"paragraph\" ? result.result.data.paragraphs : (resultMode === \"word\" ? result.result.data.words : result.result.data.lines))\r\n                    } */}\r\n\r\n\r\n                </Box>\r\n            </Box>\r\n            {\r\n                autoMode === false && scenario === \"recognize\" && progress > 0 && progress < 1 &&\r\n                <Box sx={{\r\n                    top: lowerPanelPosAndSize?.top ?? 0,\r\n                    left: 0,\r\n                    bottom: (lowerPanelPosAndSize?.height ?? 0) + (lowerPanelPosAndSize?.top ?? 0),\r\n                    right: 0,\r\n                    position: 'absolute',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n\r\n                }}>\r\n                    <Box sx={{ position: 'relative', display: 'inline-flex' }}>\r\n                        <CircularProgress size={25} variant=\"determinate\" value={100 * progress} />\r\n                        <Box\r\n                            sx={{\r\n                                top: 0,\r\n                                left: 0,\r\n                                bottom: 0,\r\n                                right: 0,\r\n                                position: 'absolute',\r\n                                display: 'inline-flex',\r\n                                alignItems: 'center',\r\n                                justifyContent: 'center',\r\n                            }}\r\n                        >\r\n                            <Typography\r\n                                variant=\"caption\"\r\n                                component=\"div\"\r\n                                color=\"text.secondary\"\r\n                                fontSize=\"20px\"\r\n                                sx={{ width: OCRSize.width }}\r\n                            >{`${Math.round(100 * progress)}%`}</Typography>\r\n\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n\r\n            }\r\n            {/* <Fab aria-label=\"Auto Mode\" onClick={() => setAutoMode(autoMode => !autoMode)} size=\"small\" style={{\r\n                position: 'absolute',\r\n                bottom: 5,\r\n                left: 5\r\n            }}>\r\n                <HdrAutoIcon color={autoMode ? undefined : \"disabled\"} />\r\n            </Fab> */}\r\n            {/* {\r\n                scenario === \"camera\" && <Fab color=\"default\" aria-label=\"add\" size=\"small\" style={{\r\n                    position: 'absolute',\r\n                    bottom: 20,\r\n                    left: 5\r\n                }} onClick={onCameraClicked}>\r\n                    <CenterFocusStrongIcon />\r\n                </Fab>\r\n            } */}\r\n            {/* {\r\n                <Fab aria-label=\"add\" size=\"small\" style={{\r\n                    position: 'absolute',\r\n                    bottom: 50,\r\n                    left: 5\r\n                }} onClick={onStyleChanged}>\r\n                    <LineStyleIcon />\r\n                </Fab>\r\n            } */}\r\n\r\n            {<Fab aria-label=\"add\" size=\"small\" style={{\r\n                position: 'absolute',\r\n                bottom: 50,\r\n                right: 5\r\n            }} onClick={onDeleteClicked}>\r\n                <DeleteForeverIcon />\r\n            </Fab>}\r\n\r\n            <Fab aria-label=\"upload\" size=\"small\" style={{\r\n                position: 'absolute',\r\n                bottom: 5,\r\n                right: 5\r\n            }} onClick={onFileUploadClick} >\r\n                <FileUploadIcon />\r\n            </Fab>\r\n\r\n            {<Fab onClick={() => { setScenario(\"crop\"); setResult(undefined) }} size=\"small\" style={{\r\n                position: 'absolute',\r\n                bottom: 95,\r\n                right: 5\r\n            }}>\r\n                <DeselectIcon />\r\n            </Fab>}\r\n\r\n            <Fab aria-label=\"Take Photo\" size=\"large\" onClick={onOCRClicked} style={{\r\n                position: 'absolute',\r\n                bottom: 5,\r\n                left: OCRSize.width / 2 - 28\r\n            }}>\r\n                <PhotoCameraIcon fontSize=\"large\" />\r\n            </Fab>\r\n\r\n            {<IconButton aria-label=\"Zoom In\" onClick={zoomIn} size=\"large\" style={{\r\n                position: 'absolute',\r\n                bottom: 0,\r\n                right: OCRSize.width / 2 - 100,\r\n            }} >\r\n                <ZoomInIcon fontSize=\"large\" color=\"info\" />\r\n            </IconButton>}\r\n            {<IconButton aria-label=\"Zoom Out\" onClick={zoomOut} size=\"large\" style={{\r\n                position: 'absolute',\r\n                bottom: 0,\r\n                left: OCRSize.width / 2 - 100,\r\n\r\n            }}>\r\n                <ZoomOutIcon fontSize=\"large\" color=\"info\" />\r\n            </IconButton>}\r\n\r\n            {/* <Fab aria-label=\"Crop\" onClick={() => setScenario(\"crop\")} size=\"small\" style={{\r\n                position: 'absolute',\r\n                bottom: 120,\r\n                left: 5\r\n            }}>\r\n                { <HighlightAltIcon />}\r\n            </Fab> */}\r\n\r\n            <Switch sx={{\r\n                position: 'absolute',\r\n                bottom: 5,\r\n                left: 5,\r\n                backgroundColor: \"white\",\r\n                margin: 0,\r\n                borderRadius: \"20px\",\r\n                fontSize: \"8px\"\r\n            }} color=\"secondary\" checked={autoMode} onChange={(_, checked: boolean) => setAutoMode(checked)}\r\n            />\r\n\r\n\r\n\r\n            <input\r\n                accept=\"images/*, image/*\"\r\n                ref={inputRef} type=\"file\"\r\n                onChange={onInputChange}\r\n                onClick={(event) => { (event.target as HTMLInputElement).value = '' }}\r\n                hidden />\r\n\r\n\r\n        </Box>\r\n    );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport OCR from \"./OCR\";\r\n\r\nconst App = () => {\r\n\r\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n  const [text, setText] = useState('')\r\n\r\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const onExamineResult = async (result: Tesseract.RecognizeResult) => {\r\n    const l = result.data.lines.find(line => line.text.startsWith(\"Serial Number:\"))\r\n    if (l) {\r\n      setText(l.text)\r\n      return true\r\n    };\r\n    return false;\r\n  }\r\n\r\n  const onSelect = async (text: string) => {\r\n    setText(text)\r\n  }\r\n\r\n  return (\r\n    <div style={{ textAlign: \"center\" }}>\r\n      <div style={{ margin: \"auto\", fontSize: \"30px\" }}>{`Result: ${text}`}</div>\r\n      <OCR onExamineResult={onExamineResult} size={{ width: 640, height: 480 }} onSelect={onSelect} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from \"react-dom\";\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.querySelector(\"#root\"));\r\n\r\n\r\n"],"sourceRoot":""}